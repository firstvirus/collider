// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using UserAnalyticsAPI.Domain.Data;

#nullable disable

namespace Domain.Data.Migrations
{
    [DbContext(typeof(MainDbContext))]
    partial class MainDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("UserAnalyticsAPI.Domain.Data.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasComment("Первичный ключ события");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("metadata")
                        .HasComment("Дополнительные данные события в формате JSON");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp")
                        .HasComment("Дата и время возникновения события");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer")
                        .HasColumnName("type_id")
                        .HasComment("Внешний ключ на таблицу event_types");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id")
                        .HasComment("Внешний ключ на таблицу users");

                    b.Property<int?>("type_id")
                        .HasColumnType("integer");

                    b.Property<Guid?>("user_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Timestamp")
                        .HasDatabaseName("ix_events_timestamp");

                    b.HasIndex("TypeId")
                        .HasDatabaseName("ix_events_type_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_events_user_id");

                    b.HasIndex("type_id");

                    b.HasIndex("user_id");

                    b.ToTable("events", t =>
                        {
                            t.Property("type_id")
                                .HasColumnName("type_id1");

                            t.Property("user_id")
                                .HasColumnName("user_id1");
                        });
                });

            modelBuilder.Entity("UserAnalyticsAPI.Domain.Data.Models.EventType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasComment("Первичный ключ типа события");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name")
                        .HasComment("Наименование типа события");

                    b.HasKey("Id");

                    b.ToTable("event_types");
                });

            modelBuilder.Entity("UserAnalyticsAPI.Domain.Data.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasComment("Первичный ключ пользователя");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasComment("Дата и время регистрации пользователя");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name")
                        .HasComment("Полное имя пользователя");

                    b.HasKey("Id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("UserAnalyticsAPI.Domain.Data.Models.Event", b =>
                {
                    b.HasOne("UserAnalyticsAPI.Domain.Data.Models.EventType", "EventType")
                        .WithMany()
                        .HasForeignKey("type_id");

                    b.HasOne("UserAnalyticsAPI.Domain.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("user_id");

                    b.Navigation("EventType");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
